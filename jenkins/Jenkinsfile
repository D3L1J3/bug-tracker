pipeline {
  agent any // Kör på valfri Jenkins-agent

  stages {
    stage('Execute Unit Tests') {
      parallel {
        // -------------------- Backend Tests --------------------
        stage('Unit Tests - Backend') {
          agent {
            docker {
              image 'snakee/golang-junit:1.21' // Go + junit reporter
              reuseNode true
            }
          }
          steps {
            dir('bugtracker-backend') {
              sh '''
                set -e
                # Go-cachar i workspace
                export GOCACHE="$PWD/.cache/go-build"
                export GOMODCACHE="$PWD/.cache/go-mod"
                mkdir -p "$GOCACHE" "$GOMODCACHE"

                # Tester + JUnit-rapport
                go test -v ./... 2>&1 | go-junit-report > test-results.xml

                # Coverage (HTML)
                go test -coverprofile coverage.out -covermode=atomic ./...
                go tool cover -html=coverage.out -o coverage.html

                # Flytta coverage till rapportmapp
                mkdir -p reports
                mv coverage.html reports/

                # Sanity
                ls -la
                ls -la reports || true
              '''
            }
          }
          post {
            always {
              junit 'bugtracker-backend/test-results.xml'
              publishHTML target: [
                reportDir: 'bugtracker-backend/reports',
                reportFiles: 'coverage.html',
                reportName: 'Backend Coverage Report'
              ]
            }
          }
        }

        // -------------------- Frontend Tests --------------------
        stage('Unit Tests - Frontend') {
          agent {
            docker {
              image 'node:20-alpine'
              reuseNode true
            }
          }
          steps {
            dir('bugtracker-frontend') {
              sh '''
                set -e
                npm ci
                npm test

                # Flytta coverage till rapportmapp
                mkdir -p reports
                mv coverage reports/
              '''
            }
          }
          post {
            always {
              junit 'bugtracker-frontend/test-results.xml'
              publishHTML target: [
                reportDir: 'bugtracker-frontend/reports/coverage',
                reportFiles: 'index.html',
                reportName: 'Frontend Coverage Report'
              ]
            }
          }
        }
      } // end parallel
    } // end stage 'Execute Unit Tests'

    // -------------------- Build & start containers --------------------
    stage('Launch Application') {
      agent {
        docker {
          image 'docker:27.5.1'
          reuseNode true
          // entrypoint='' så Jenkins inte klagar på imagen
          args "--entrypoint='' -v /var/run/docker.sock:/var/run/docker.sock -u 0"
        }
      }
      steps {
        // (Valfritt) logga in mot Docker Hub för att undvika anonyma pull-rate/503
        script {
          try {
            withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
              sh '''
                echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin || true
              '''
            }
          } catch (ignored) {
            // Om credsen inte finns: hoppa över login
            echo 'Docker Hub credentials not configured; continuing anonymously.'
          }
        }

        // Pre-pulla basimager (tål nätstrul)
        sh '''
          docker pull golang:1.21-alpine || true
          docker pull node:20-alpine || true
        '''

        // Robust compose med retry (undvik transient 503/timeout)
        retry(3) {
          sh '''
            set -e
            docker compose pull || true
            docker compose up --build -d
          '''
          sleep 5
        }
      }
    }

    // -------------------- API tests (Playwright) --------------------
    stage('Api Tests') {
      agent {
        docker {
          image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
          reuseNode true
          args '-u 0 --network=host' // root + host-nät, så localhost:8080 funkar
        }
      }
      steps {
        dir('test-api') { // VIKTIGT: mappen heter "test-api" i repot
          sh 'npx wait-port http://localhost:8080/api/health -t 30000'

          sh 'mkdir -p test-results playwright-report'
          // Undvik krockar med ev. TS/MJS/CJS-config
          sh 'rm -f playwright.config.ts playwright.config.mjs playwright.config.cjs'

          // Skriv en enkel CommonJS-config (inga imports)
          sh '''
            node -e "require('fs').writeFileSync('playwright.config.js', `
            module.exports = {
              testDir: './',
              reporter: [
                ['junit', { outputFile: 'test-results/results.xml' }],
                ['html',  { outputFolder: 'playwright-report', open: 'never' }],
              ],
            };
            `)"
          '''

          // Kör testerna mot vår config
          sh 'npx --yes @playwright/test@1.50.0 test -c playwright.config.js'
        }
      }
      post {
        always {
          junit 'test-api/test-results/results.xml'
          publishHTML target: [
            reportDir: 'test-api/playwright-report',
            reportFiles: 'index.html',
            reportName: 'Playwright Test Report'
          ]
        }
      }
    }
  } // end stages

  // -------------------- Cleanup --------------------
  post {
    always {
      cleanWs()
    }
  }
}
