pipeline {
  agent any

  stages {
    stage('Execute Unit Tests') {
      parallel {
        stage('Unit Tests - Backend') {
          agent { docker { image 'snakee/golang-junit:1.21'; reuseNode true } }
          steps {
            dir('bugtracker-backend') {
              sh '''
                set -e
                export GOCACHE="$PWD/.cache/go-build"
                export GOMODCACHE="$PWD/.cache/go-mod"
                mkdir -p "$GOCACHE" "$GOMODCACHE"

                go test -v ./... 2>&1 | go-junit-report > test-results.xml
                go test -coverprofile coverage.out -covermode=atomic ./...
                go tool cover -html=coverage.out -o coverage.html

                mkdir -p reports
                mv coverage.html reports/
                ls -la
                ls -la reports || true
              '''
            }
          }
          post {
            always {
              junit 'bugtracker-backend/test-results.xml'
              publishHTML target: [
                reportDir: 'bugtracker-backend/reports',
                reportFiles: 'coverage.html',
                reportName: 'Backend Coverage Report'
              ]
            }
          }
        }

        stage('Unit Tests - Frontend') {
          agent { docker { image 'node:20-alpine'; reuseNode true } }
          steps {
            dir('bugtracker-frontend') {
              sh '''
                set -e
                npm ci
                npm test
                mkdir -p reports
                mv coverage reports/
              '''
            }
          }
          post {
            always {
              junit 'bugtracker-frontend/test-results.xml'
              publishHTML target: [
                reportDir: 'bugtracker-frontend/reports/coverage',
                reportFiles: 'index.html',
                reportName: 'Frontend Coverage Report'
              ]
            }
          }
        }
      }
    }

    stage('Launch Application') {
      agent {
        docker {
          image 'docker:27.5.1'
          reuseNode true
          args "--entrypoint='' -v /var/run/docker.sock:/var/run/docker.sock -u 0"
        }
      }
      steps {
        script {
          try {
            withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
              sh 'echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin || true'
            }
          } catch (ignored) {
            echo 'Docker Hub credentials not configured; continuing anonymously.'
          }
        }

        // använd Googles mirror först för att slippa Docker Hub-strul
        sh '''
          set +e
          docker pull mirror.gcr.io/library/golang:1.21-alpine || docker pull golang:1.21-alpine
          docker tag mirror.gcr.io/library/golang:1.21-alpine golang:1.21-alpine 2>/dev/null || true

          docker pull mirror.gcr.io/library/node:20-alpine   || docker pull node:20-alpine
          docker tag mirror.gcr.io/library/node:20-alpine   node:20-alpine 2>/dev/null || true
          set -e
        '''

        retry(3) {
          sh '''
            set -e
            docker compose pull || true
            docker compose up --build -d
          '''
          sleep 5
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
